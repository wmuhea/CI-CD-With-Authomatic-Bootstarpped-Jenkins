plugins {
	id 'org.springframework.boot' version '2.3.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'pl.allegro.tech.build.axion-release' version '1.10.1'
	id 'com.palantir.docker' version '0.25.0'
	id 'com.palantir.docker-run' version '0.25.0'
	id 'jp.classethod.aws.cloudformation' version '0.41'
}

group = 'com.springjenkinstut'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
	jcenter()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.projectlombok:lombok:1.18.12'
	annotationProcessor 'org.projectlombok:lombok:1.18.12'
	runtimeOnly 'com.h2database:h2'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

project.version=scmVersion.version

// name of the image that docker creates
// the palantir plugins are used to integrate creating an image with gradle build
// image name should not contain and capital letters or it will give a build error
String dockerHubUsernameProperty = findProperty("dockerHubUsername")?: 'wmuhea'
String imageName = "${dockerHubUsernameProperty}/springjenkinscicd:${version}"

docker {
	name imageName
	files "build/libs/${bootJar.archiveFileName.get()}"
	buildArgs([JAR_FILE:bootJar.archiveFileName.get()])
}

dockerRun {
	name project.name
	image imageName
	ports '8080:8080'
	clean true
}

// Cloud formation as one gradle task
// stackName => the way to refer to your template once it is deployed in aws
// It contains all the resources that have been defined by the template
// All the parameters we need in yml template are added here

cloudFormation {
	stackName "$project.name-stack"
	stackParams([
			SubnetID: findProperty("SubnetId")?: '',
			ServiceName: project.name,
			ServiceVersion: project.version,
			DockerHubUsername: dockerHubUsernameProperty
	])
	templateFile project.file("ecs.yml")
}